{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","mapboxgl","accessToken","bounds","App","props","state","lng","lat","zoom","map","Map","container","this","mapContainer","style","maxBounds","on","labelLayerId","layers","getStyle","i","length","type","layout","id","addLayer","className","ref","el","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,mKCK3CC,IAASC,YAAc,mGAEvB,IAAMC,EAAS,CACb,CAAC,mBAAoB,mBACrB,CAAC,mBAAoB,oBAuFRC,E,YApFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,IAAK,EACLC,IAAK,GACLC,KAAM,GALS,E,iFASjB,IAAMC,EAAM,IAAIT,IAASU,IAAI,CAC3BC,UAAWC,KAAKC,aAChBC,MAAO,kCACPN,KAAMI,KAAKP,MAAMG,KACjBO,UAAWb,IAGbO,EAAIO,GAAG,QAAQ,eAGfP,EAAIO,GAAG,QAAQ,WAKb,IAHA,IAEIC,EAFAC,EAAST,EAAIU,WAAWD,OAGnBE,EAAI,EAAGA,EAAIF,EAAOG,OAAQD,IACjC,GAAuB,WAAnBF,EAAOE,GAAGE,MAAqBJ,EAAOE,GAAGG,OAAO,cAAe,CACjEN,EAAeC,EAAOE,GAAGI,GACzB,MAIJf,EAAIgB,SACF,CACE,GAAM,eACN,OAAU,YACV,eAAgB,WAChB,OAAU,CAAC,KAAM,UAAW,QAC5B,KAAQ,iBACR,QAAW,GACX,MAAS,CACP,uBAAwB,OAIxB,wBAAyB,CACvB,cACA,CAAC,UACD,CAAC,QACD,GACA,EACA,MACA,CAAC,MAAO,WAEV,sBAAuB,CACrB,cACA,CAAC,UACD,CAAC,QACD,GACA,EACA,MACA,CAAC,MAAO,eAEV,yBAA0B,KAG9BR,Q,+BAMI,IAAD,OACP,OACE,yBAAKS,UAAU,OACb,4BAAQA,UAAU,eAElB,6BACE,yBAAKC,IAAK,SAAAC,GAAE,OAAI,EAAKf,aAAee,GAAIF,UAAU,uB,GA9E1CG,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6a41fb4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport mapboxgl from 'mapbox-gl';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiYXVzdGluaHVuZzgxIiwiYSI6ImNrNWh4Z252OTA4cHAzZ285dmR4ZnB6cmYifQ.7Hij0vbrY3lfBp_pxZD2cw';\n\nconst bounds = [\n  [115.93339971075522, 21.69236816168778], // Southwest coordinates\n  [127.71754170874522, 25.43456255835359] // Northeast coordinates\n];\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 5,\n      lat: 34,\n      zoom: 2\n    };\n  };\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/dark-v10',\n      zoom: this.state.zoom,\n      maxBounds: bounds\n    });\n\n    map.on('move', () => {\n    });\n\n    map.on('load', function () {\n      // Insert the layer beneath any symbol layer.\n      var layers = map.getStyle().layers;\n\n      var labelLayerId;\n      for (var i = 0; i < layers.length; i++) {\n        if (layers[i].type === 'symbol' && layers[i].layout['text-field']) {\n          labelLayerId = layers[i].id;\n          break;\n        }\n      }\n\n      map.addLayer(\n        {\n          'id': '3d-buildings',\n          'source': 'composite',\n          'source-layer': 'building',\n          'filter': ['==', 'extrude', 'true'],\n          'type': 'fill-extrusion',\n          'minzoom': 15,\n          'paint': {\n            'fill-extrusion-color': '#aaa',\n\n            // use an 'interpolate' expression to add a smooth transition effect to the\n            // buildings as the user zooms in\n            'fill-extrusion-height': [\n              'interpolate',\n              ['linear'],\n              ['zoom'],\n              15,\n              0,\n              15.05,\n              ['get', 'height']\n            ],\n            'fill-extrusion-base': [\n              'interpolate',\n              ['linear'],\n              ['zoom'],\n              15,\n              0,\n              15.05,\n              ['get', 'min_height']\n            ],\n            'fill-extrusion-opacity': 0.6\n          }\n        },\n        labelLayerId\n      );\n    });\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n        <div>\n          <div ref={el => this.mapContainer = el} className='mapContainer' />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}